1. convert httpRequestHandler to take protocol using strategy pattern (Done)

2. move existing logic to TCP protocol (Done)

3. create PseudoTCP protocol
    https://docs.oracle.com/javase/7/docs/api/java/net/DatagramSocket.html#receive(java.net.DatagramPacket)

    3a. create UdpPacket class ->
        note: maybe DatagramPacket instead
              or simply serialize UdpPacket into buffer, and create to DatagramPacket(buffer, buffer.length)
        enum            packetType
        unsigned int    sequenceNumber 4b big-endian
        4 bytes         peerAddress
        unsigned short  peerPort       2b big-endian
        byte-buffer     payload        0 -1013 bytes
        checksum? - not mentioned in assignment
        quick packet creation for response (address, port, ACK/SYN/SYN-ACK...)

    3b. create UdpMessage class ->
        **(Driven by ReliableConnection)
        receives message as string or bytearray
        receives destination address, port
        converts message to bytes
        chops message into 1013 byte sections
        creates UdpPack for each section of message, assigning correct sequence number (Given by ReliableConnection) and packet info
        getPackets method return list of packets in order.

    3c. Create ReliableConnection class for establishing connection with handshaking over UDP ->
        receives: address, port
        run handshaking with peer and sync sequence number registry
        **Handles handshaking timeout & retry internally
        When connected, allow for receiving message
        send(message) should internally create a UdpMessage, and send all packets over reliable connection.
        provide some key events (ie: termination event, etc)

        TODO: List todos for receiver side too.




